// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"
)

const addUser = `-- name: AddUser :exec
INSERT INTO users (
    username, email, password, salt, refresh_token
) VALUES (
    $1, $2, $3, $4, $5
)
`

type AddUserParams struct {
	Username     string
	Email        string
	Password     string
	Salt         string
	RefreshToken string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Salt,
		arg.RefreshToken,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :one
SELECT id, username, email, password, salt, refresh_token, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetAllUsers(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getAllUsers, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, salt, refresh_token, created_at, updated_at FROM users
WHERE email = $1 
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
